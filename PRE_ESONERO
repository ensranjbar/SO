#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>
#include <unistd.h>

#define N_RECORDS 10

struct record {
	int a;
	int b;
	int c;
};

int compara(const void *x, const void *y) {
	struct record *a = (struct record*) x;
	struct record *b = (struct record*) y;
	return a->a - b->a;
	
	
}

struct record* genera(int n) {
	struct record *records = (struct record*) calloc(n, sizeof(struct record));
	for (int i=0; i<n; i++) {
		records[i].a = rand();
		records[i].b = rand();
		records[i].c = rand();
	}
	return records;
}

void scrivi(char* path, struct record* records, int n) {
	int fd = open(path, O_CREAT|O_WRONLY|O_TRUNC, S_IRWXU);
	if (fd == -1) {
		perror("Errore nella open: ");
		exit(-1);
	}
	for (int i=0; i<n; i++) {
		int written = 0;
		while (written < sizeof(struct record)) {
			written+=write(fd, (char*)&records[i]+written, sizeof(struct record)-written);
		}
	}
	close(fd);
}

void stampa_records(struct record *records, int n) {
	for (int i=0; i<n; i++) {
		printf("%d:\t %d\t%d\t%d\n", i, records[i].a, records[i].b, records[i].c);
	}
}


struct record* leggi(char* path) {
	int fd = open(path, O_RDONLY);
	if (fd == -1) {
		perror("Errore nella open: ");
		exit(-1);
	}
	struct stat stats;
	fstat(fd, &stats);
	struct record *records = (struct record*) malloc(stats.st_size);
	int n_records = stats.st_size/sizeof(struct record);
	for (int i=0; i<n_records; i++) {
		read(fd, &records[i], sizeof(struct record));
	}
	close(fd);
	return records;	
}

int main(int argc, char** argv) {
	if (argc != 2) {
		fprintf(stderr, "Mi spiace, ma devi passare un argomento");
		exit(-1);
	}
	char* path = argv[1];

	struct record *records = genera(N_RECORDS);
	stampa_records(records, N_RECORDS);
	scrivi(path, records, N_RECORDS);
	free(records);
	records=leggi(path);
	printf("\n\n\n\n");
	stampa_records(records, N_RECORDS);
	qsort(records, N_RECORDS, sizeof(struct record), compara);
	printf("\n\n\n\n");
	stampa_records(records, N_RECORDS);
}














